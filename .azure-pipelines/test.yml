
stages:
  - stage: build_natives
    displayName: Natives
    jobs:
    - job: build_win32_natives
      displayName: Win32
      pool:
        vmImage: 'vs2017-win2016'
      strategy:
        matrix:
          Debug:
            CMAKE_BUILD_TYPE: 'Debug'
          Release:
            CMAKE_BUILD_TYPE: 'Release'
      steps:
      - task: CMake@1
        inputs:
          cmakeArgs: '../native'
      - task: MSBuild@1
        inputs:
          solution: build/releng.sln
          configuration: $(CMAKE_BUILD_TYPE)
      - task: Bash@3
        displayName: 'Prepare Build artifacts'
        inputs:
          script: |
            mkdir -p artifacts/win32/$(CMAKE_BUILD_TYPE)
            cp build/DriftFX/$(CMAKE_BUILD_TYPE)/driftfx.dll artifacts/win32/$(CMAKE_BUILD_TYPE)/
            cp build/DriftFX/$(CMAKE_BULID_TYPE)/driftfx.lib artifacts/win32/$(CMAKE_BUILD_TYPE)/
            [[ "$(CMAKE_BUILD_TYPE)" == "Debug" ]] && cp build/DriftFX/$(CMAKE_BUILD_TYPE)/driftfx.pdb artifacts/win32/$(CMAKE_BUILD_TYPE)/
            cp build/samples/$(CMAKE_BUILD_TYPE)/samples.dll artifacts/win32/$(CMAKE_BUILD_TYPE)/
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'artifacts/*'
          ArtifactName: 'driftfx_natives'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: build/DriftFX/$(CMAKE_BUILD_TYPE)/driftfx.dll
          ArtifactName: 'win32_$(CMAKE_BUILD_TYPE)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: build/DriftFX/$(CMAKE_BUILD_TYPE)/driftfx.lib
          ArtifactName: 'win32_$(CMAKE_BUILD_TYPE)'
      - task: PublishBuildArtifacts@1
        condition: eq(variables['CMAKE_BUILD_TYPE'], 'Debug')
        inputs:
          PathtoPublish: build/DriftFX/$(CMAKE_BUILD_TYPE)/driftfx.pdb
          ArtifactName: 'win32_$(CMAKE_BUILD_TYPE)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: build/samples/$(CMAKE_BUILD_TYPE)/samples.dll
          ArtifactName: 'win32_$(CMAKE_BUILD_TYPE)'
    - job: build_macos_natives
      displayName: MacOS
      pool:
        vmImage: 'macOS-10.14'
      strategy:
        matrix:
          Debug:
            CMAKE_BUILD_TYPE: 'Debug'
          Release:
            CMAKE_BUILD_TYPE: 'Release'
      steps:
      - bash: .azure-pipelines/build-unix.sh
      - task: Bash@3
        displayName: 'Prepare Build artifacts'
        inputs:
          script: |
            mkdir -p artifacts/macos/$(CMAKE_BUILD_TYPE)
            cp build/DriftFX/libdriftfx.dylib artifacts/macos/$(CMAKE_BUILD_TYPE)/
            cp build/samples/libsamples.dylib artifacts/macos/$(CMAKE_BUILD_TYPE)/
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'artifacts/*'
          ArtifactName: 'driftfx_natives'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: build/DriftFX/libdriftfx.dylib
          ArtifactName: 'macos_$(CMAKE_BUILD_TYPE)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: build/samples/libsamples.dylib
          ArtifactName: 'macos_$(CMAKE_BUILD_TYPE)'
    - job: build_linux_natives
      displayName: Linux
      pool:
        vmImage: 'ubuntu-16.04'
      strategy:
        matrix:
          Debug:
            CMAKE_BUILD_TYPE: 'Debug'
          Release:
            CMAKE_BUILD_TYPE: 'Release'
      steps: 
      - bash: .azure-pipelines/build-unix.sh
      - task: Bash@3
        displayName: 'Prepare Build artifacts'
        inputs:
          script: |
            mkdir -p artifacts/macos/$(CMAKE_BUILD_TYPE)
            cp build/DriftFX/libdriftfx.so artifacts/macos/$(CMAKE_BUILD_TYPE)/
            cp build/samples/libsamples.so artifacts/macos/$(CMAKE_BUILD_TYPE)/
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'artifacts/*'
          ArtifactName: 'driftfx_natives'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: build/DriftFX/libdriftfx.so
          ArtifactName: 'linux_$(CMAKE_BUILD_TYPE)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: build/samples/libsamples.so
          ArtifactName: 'linux_$(CMAKE_BUILD_TYPE)'
  - stage: build_java
    jobs:
    - job: build_java
      steps:
      - bash: curl -s https://cdn.azul.com/zulu/bin/zulu8.40.0.25-ca-fx-jdk8.0.222-linux_x64.tar.gz --output jdk.tar.gz
        displayName: 'Downloading JDK 8u222 with JavaFX'
      - task: JavaToolInstaller@0
        displayName: 'Setting up JDK'
        inputs:
          versionSpec: '8'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'LocalDirectory'
          jdkFile: 'jdk.tar.gz'
          jdkDestinationDirectory: '/builds/binaries/externals'
          cleanDestinationDirectory: true
      - task: DownloadBuildArtifacts@0
        inputs:
         artifactName: 'linux_Debug'
         downloadPath: 'artifacts/'
      - task: DownloadBuildArtifacts@0
        inputs:
         artifactName: 'linux_Release'
         downloadPath: 'artifacts/'
      - task: DownloadBuildArtifacts@0
        inputs:
         artifactName: 'win32_Debug'
         downloadPath: 'artifacts/'
      - task: DownloadBuildArtifacts@0
        inputs:
         artifactName: 'win32_Release'
         downloadPath: 'artifacts/'
      - task: DownloadBuildArtifacts@0
        inputs:
         artifactName: 'macos_Debug'
         downloadPath: 'artifacts/'
      - task: DownloadBuildArtifacts@0
        inputs:
         artifactName: 'macos_Release'
         downloadPath: 'artifacts/'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # copy artifacts
            cp artifacts/win32_Debug/driftfx.dll org.eclipse.fx.drift.native.win32.debug/native/
            cp artifacts/win32_Release/driftfx.dll org.eclipse.fx.drift.native.win32/native/
            cp artifacts/macos_Debug/libdriftfx.dylib org.eclipse.fx.drift.native.macos.debug/native/
            cp artifacts/macos_Release/libdriftfx.dylib org.eclipse.fx.drift.native.macos/native/
            cp artifacts/linux_Debug/libdriftfx.so org.eclipse.fx.drift.native.linux.debug/native/
            cp artifacts/linux_Release/libdriftfx.so org.eclipse.fx.drift.native.linux/native/
            cp artifacts/win32_Debug/samples.dll org.eclipse.fx.drift.samples/native/
            cp artifacts/macos_Debug/libsamples.dylib org.eclipse.fx.drift.samples/native/
            cp artifacts/linux_Debug/libsamples.so org.eclipse.fx.drift.samples/native/
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          options: '--batch-mode'
          goals: 'clean package'
          mavenVersionOption: 'Default'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            mkdir dist
            zip -r dist/sources.zip native org.eclipse.fx.drift org.eclipse.fx.drift.feature org.eclipse.fx.drift.samples org.eclipse.fx.drift.samples.feature
            echo "$(Build.SourceVersion)" > dist/git_commit
            mkdir dist/include
            cp -R native/DriftFX/include/* dist/include/
            mkdir dist/libs
            cp -R artifacts/* dist/libs/
            zip -r dist.zip dist/*
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: dist.zip
          ArtifactName: driftfx
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: org.eclipse.fx.drift.updatesite/target/org.eclipse.fx.drift.updatesite-0.1.0-SNAPSHOT.zip
          ArtifactName: driftfx
