name: $(Build.SourceBranchName).$(Rev:r)
stages:
  - stage: output
    jobs:
    - job: output
      steps:
      - bash: |
          echo "$(Rev)"
          echo ${Rev}
          echo "-----"
          env
  - stage: build_natives
    displayName: Natives
    jobs:
    - job: build_win32_natives
      displayName: Win32
      pool:
        vmImage: 'vs2017-win2016'
      strategy:
        matrix:
          Debug:
            CMAKE_BUILD_TYPE: 'Debug'
          Release:
            CMAKE_BUILD_TYPE: 'Release'
      steps:
      - task: CMake@1
        inputs:
          cmakeArgs: '../native'
      - task: MSBuild@1
        inputs:
          solution: build/releng.sln
          configuration: $(CMAKE_BUILD_TYPE)
      - task: Bash@3
        displayName: 'Prepare artifacts'
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p artifacts/win32/$(CMAKE_BUILD_TYPE)
            cp -v build/DriftFX/$(CMAKE_BUILD_TYPE)/driftfx.dll artifacts/win32/$(CMAKE_BUILD_TYPE)/
            cp -v build/DriftFX/$(CMAKE_BULID_TYPE)/driftfx.lib artifacts/win32/$(CMAKE_BUILD_TYPE)/
            [[ "$(CMAKE_BUILD_TYPE)" == "Debug" ]] && cp -v build/DriftFX/$(CMAKE_BUILD_TYPE)/driftfx.pdb artifacts/win32/$(CMAKE_BUILD_TYPE)/
            cp -v build/samples/$(CMAKE_BUILD_TYPE)/samples.dll artifacts/win32/$(CMAKE_BUILD_TYPE)/
      - task: PublishBuildArtifacts@1
        displayName: 'Upload artifacts'
        inputs:
          PathtoPublish: 'artifacts'
          ArtifactName: 'driftfx_natives'
    - job: build_macos_natives
      displayName: MacOS
      pool:
        vmImage: 'macOS-10.14'
      strategy:
        matrix:
          Debug:
            CMAKE_BUILD_TYPE: 'Debug'
          Release:
            CMAKE_BUILD_TYPE: 'Release'
      steps:
      - bash: .azure-pipelines/build-unix.sh
        displayName: 'Build natives'
      - task: Bash@3
        displayName: 'Prepare artifacts'
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p artifacts/macos/$(CMAKE_BUILD_TYPE)
            cp -v build/DriftFX/libdriftfx.dylib artifacts/macos/$(CMAKE_BUILD_TYPE)/
            cp -v build/samples/libsamples.dylib artifacts/macos/$(CMAKE_BUILD_TYPE)/
      - task: PublishBuildArtifacts@1
        displayName: 'Upload artifacts'
        inputs:
          PathtoPublish: 'artifacts'
          ArtifactName: 'driftfx_natives'
    - job: build_linux_natives
      displayName: Linux
      pool:
        vmImage: 'ubuntu-16.04'
      strategy:
        matrix:
          Debug:
            CMAKE_BUILD_TYPE: 'Debug'
          Release:
            CMAKE_BUILD_TYPE: 'Release'
      steps: 
      - bash: .azure-pipelines/build-unix.sh
        displayName: 'Build natives'
      - task: Bash@3
        displayName: 'Prepare artifacts'
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p artifacts/linux/$(CMAKE_BUILD_TYPE)
            cp -v build/DriftFX/libdriftfx.so artifacts/linux/$(CMAKE_BUILD_TYPE)/
            cp -v build/samples/libsamples.so artifacts/linux/$(CMAKE_BUILD_TYPE)/
      - task: PublishBuildArtifacts@1
        displayName: 'Upload artifacts'
        inputs:
          PathtoPublish: 'artifacts'
          ArtifactName: 'driftfx_natives'
  - stage: build_java
    displayName: 'Maven Build'
    jobs:
    - job: build_java
      displayName: 'Maven Build'
      steps:
      - bash: curl -s https://cdn.azul.com/zulu/bin/zulu8.40.0.25-ca-fx-jdk8.0.222-linux_x64.tar.gz --output jdk.tar.gz
        displayName: 'Downloading JDK 8u222 with JavaFX'
      - task: JavaToolInstaller@0
        displayName: 'Setting up JDK'
        inputs:
          versionSpec: '8'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'LocalDirectory'
          jdkFile: 'jdk.tar.gz'
          jdkDestinationDirectory: '/builds/binaries/externals'
          cleanDestinationDirectory: true
      - task: DownloadBuildArtifacts@0
        displayName: 'Download artifacts'
        inputs:
          artifactName: 'driftfx_natives'
          downloadPath: 'artifacts'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # copy artifacts
            cp -v artifacts/driftfx_natives/win32/Debug/driftfx.dll org.eclipse.fx.drift.native.win32.debug/native/
            cp -v artifacts/driftfx_natives/win32/Release/driftfx.dll org.eclipse.fx.drift.native.win32/native/
            cp -v artifacts/driftfx_natives/macos/Debug/libdriftfx.dylib org.eclipse.fx.drift.native.macos.debug/native/
            cp -v artifacts/driftfx_natives/macos/Release/libdriftfx.dylib org.eclipse.fx.drift.native.macos/native/
            cp -v artifacts/driftfx_natives/linux/Debug/libdriftfx.so org.eclipse.fx.drift.native.linux.debug/native/
            cp -v artifacts/driftfx_natives/linux/Release/libdriftfx.so org.eclipse.fx.drift.native.linux/native/
            cp -v artifacts/driftfx_natives/win32/Debug/samples.dll org.eclipse.fx.drift.samples/native/
            cp -v artifacts/driftfx_natives/macos/Debug/libsamples.dylib org.eclipse.fx.drift.samples/native/
            cp -v artifacts/driftfx_natives/linux/Debug/libsamples.so org.eclipse.fx.drift.samples/native/
      - task: DownloadSecureFile@1
        displayName: 'Prepare maven settings'
        name: settings_xml
        inputs:
          secureFile: 'settings.xml'
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          options: '--settings $(settings_xml.secureFilePath) --batch-mode -P azure'
          goals: 'clean package deploy'
          mavenVersionOption: 'Default'
      - task: Bash@3
        inputs:
         targetType: inline
         script: |
           echo "$WEBHOOK_URL/buildWithParameters?token=xxx&BUILD_NUMBER=$REV&BRANCH_NAME=$(Build.SourceBranchName)"
           STATUS=`curl -v -w "%{http_code}" "$WEBHOOK_URL/buildWithParameters?token=$WEBHOOK_TOKEN&BUILD_NUMBER=$REV&BRANCH_NAME=$(Build.SourceBranchName)"`
           echo 'Triggered Jenkins: $STATUS'